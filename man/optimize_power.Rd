% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimize_power.R
\name{optimize_power}
\alias{optimize_power}
\title{#' Midpoint function
#'
#' Calculating the midpoint between the lower and upper bound by calculating
#' half the distance between the two and adding the lower bound to it. The
#' function is a helper function in determining the MDES that falls within
#' acceptable power range.
#'
#' @param lower lower bound
#' @param upper upper bound
#' @importFrom stats dist
#' @return returns midpoint value
midpoint <- function(lower, upper) {
  return(lower + dist(c(lower, upper))[[1]]/2)
}
Optimizes power to help in search for MDES or SS}
\usage{
optimize_power(
  design,
  search.type,
  MTP,
  target.power,
  power.definition,
  tol,
  start.tnum,
  start.low,
  start.high,
  MDES = NULL,
  J = NULL,
  K = 1,
  nbar = NULL,
  M = M,
  Tbar = Tbar,
  alpha,
  numCovar.1 = 0,
  numCovar.2 = 0,
  numCovar.3 = 0,
  R2.1 = 0,
  R2.2 = 0,
  R2.3 = 0,
  ICC.2 = 0,
  ICC.3 = 0,
  omega.2 = 0,
  omega.3 = 0,
  rho,
  B = NULL,
  cl = NULL,
  max.steps = 20,
  max.tnum = 2000,
  final.tnum = 4 * max.tnum,
  give.warnings = FALSE
)
}
\arguments{
\item{design}{a single RCT design (see list/naming convention)}

\item{search.type}{options: MDES, J, K (nbar not currently supported)}

\item{MTP}{a single multiple adjustment procedure of interest. Supported
options: Bonferroni, BH, Holm, WY-SS, WY-SD}

\item{target.power}{Target power to arrive at}

\item{power.definition}{must be a valid power type outputted by power
function, i.e. D1indiv, min1, etc.}

\item{MDES}{scalar or vector:  t he MDES values for each outcome. Please
provide a scalar, a vector of length M, or vector of values for non-zero
outcomes.}

\item{J}{scalar; the number of schools}

\item{K}{scalar; the number of districts}

\item{nbar}{scalar; the harmonic mean of the number of units per school}

\item{M}{scalar; the number of hypothesis tests (outcomes), including zero
outcomes}

\item{Tbar}{scalar; the proportion of samples that are assigned to the
treatment}

\item{alpha}{scalar; the family wise error rate (FWER)}

\item{numCovar.1}{scalar; number of Level 1 (individual) covariates (not
including block dummies)}

\item{numCovar.2}{scalar; number of Level 2 (school) covariates}

\item{numCovar.3}{scalar; number of Level 3 (district) covariates}

\item{R2.1}{scalar, or vector of length M; percent of variation explained by
Level 1 covariates for each outcome. Defaults to 0.}

\item{R2.2}{scalar, or vector of length M; percent of variation explained by
Level 2 covariates for each outcome. Defaults to 0.}

\item{R2.3}{scalar, or vector of length M; percent of variation explained by
Level 3 covariates for each outcome. Defaults to 0.}

\item{ICC.2}{scalar; school intraclass correlation}

\item{ICC.3}{scalar; district intraclass correlation}

\item{omega.2}{scalar; ratio of variance of school-average impacts to
variance of school-level random intercepts.  Default to 0 (no treatment
variation).}

\item{omega.3}{scalar; ratio of variance of district-average impacts to
variance of district-level random intercepts. Default to 0 (no treatment
variation).}

\item{rho}{scalar; assumed correlation between the test statistics of the
tests.}

\item{B}{scalar; the number of samples/permutations for Westfall-Young}

\item{cl}{cluster object to use for parallel processing}

\item{max.steps}{how many steps allowed before terminating}

\item{max.tnum}{maximum number of samples for a single step (other than the final check step).}

\item{final.tnum}{number of samples for final draw}
}
\value{
power
}
\description{
#' Midpoint function
#'
#' Calculating the midpoint between the lower and upper bound by calculating
#' half the distance between the two and adding the lower bound to it. The
#' function is a helper function in determining the MDES that falls within
#' acceptable power range.
#'
#' @param lower lower bound
#' @param upper upper bound
#' @importFrom stats dist
#' @return returns midpoint value
midpoint <- function(lower, upper) {
  return(lower + dist(c(lower, upper))[[1]]/2)
}
Optimizes power to help in search for MDES or SS
}
